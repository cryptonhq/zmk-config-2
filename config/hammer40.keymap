/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "hammer40_keylabels.h"
#include "zmk-helpers/helper.h"

/* Layers */
#define BASE 0
#define LOWR 1
#define NAV 2

#include "mouse.dtsi"

#define XXX &none
#define ___ &trans
#define QUICK_TAP_MS 175
#undef COMBO_TERM
#define COMBO_TERM 50

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS LH5 LH4 LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3 RH4 RH5                         // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

ZMK_COMBO(capsw, &caps_word, LM0 RM0)
ZMK_COMBO(bootl, &bootloader, LT5 LT4 LT3)
ZMK_COMBO(reset, &sys_reset, RT5 RT4 RT3)
ZMK_COMBO(softoff, &soft_off, LH0 MD1 RH0)

/ {
    behaviors {
        ble_encoder: ble_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&bt BT_NXT>, <&bt BT_PRV>;
        };
    };
};

ZMK_TAP_DANCE(rot_td,
    tapping-term-ms = <250>;
    bindings = <&kp C_PP>, <&kp C_NEXT>, <&kp C_PREV>;
)

ZMK_LAYER(base,
    &kp GRAVE  &kp Q        &kp W        &kp E         &kp R         &kp T                   &kp Y           &kp U         &kp I         &kp O        &kp P           &kp LBKT
    &kp TAB    &hml LGUI A  &hml LALT S  &hml LSHFT D  &hml LCTRL F  &kp G                   &kp H           &hmr LCTRL J  &hmr RSHFT K  &hmr LALT L  &hmr LGUI SEMI  &kp APOS
    &kp RBKT   &kp Z        &kp X        &kp C         &kp V         &kp B          &rot_td  &kp N           &kp M         &kp COMMA     &kp DOT      &kp FSLH        &kp MINUS
    &kp BSLH   &kp PSCRN    &kp LCTRL    &kp LGUI      &kp LALT      &lt NAV ENTER  &kp ESC  &lt LOWR SPACE  &kp BSPC      &kp DEL        &kp LSHFT     &kp RCTRL     &kp EQUAL
    , &inc_dec_kp C_VOL_UP C_VOL_DN
)

ZMK_LAYER(lowr,
    ___           &kp N1        &kp N2        &kp N3        &kp N4        &kp N5             &kp N6          &kp N7         &kp N8         &kp N9         &kp N0         ___
    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR         &bt BT_CLR_ALL  &bt BT_DISC 4  &bt BT_DISC 4  &bt BT_DISC 2  &bt BT_DISC 1  &bt BT_DISC 0
    ___           ___           ___           ___           ___           &out OUT_USB  ___  &out OUT_BLE    ___            ___            ___            ___            ___
    ___           ___           ___           ___           ___           ___           ___  ___             ___            ___            ___            ___            ___
    , &ble_encoder
)

ZMK_LAYER(nav,
    &kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6        &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    ___  ___
    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12       &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  ___  ___
    ___     ___     ___     ___      ___      ___      ___  ___       ___        ___        ___        ___  ___
    ___     ___     ___     ___      ___      ___      ___  ___       ___        ___        ___        ___  ___
)